A call of the form replace(0, 0, myString) should prepend the contents of myString to current contents of the text store.  However, a ProjectionTextStore instead replaces the contents of the text store with myString.  This means that the calls replace(0, 0, myString) and set(myString) are equivalent. The underlying cause can be found in ProjectionMapping.toOriginRegion() where an image region of offset 0 and length 0 is mapped to a master region of offset 0 and a length equal to the master document. The effect of this bug can be seen through a simple test case involving the java editor. STEPS TO REPRODUCE:1. Create a new java class and open it in the java editor.2. Add a new method and place the cursor inside the method body.3. Click on the "Show Source of Selected Element Only" button on the toolbar.  This will show only the new method in the java editor (indirectly creating a ProjectionDocument).4. Select the entire contents of the method (Edit menu --> Select All or use the mouse).5. Press delete.  At this point, just the selected text has been deleted.6. Type a character.  This indirectly invokes the replace() method on the ProjectionTextStore with an offset of 0 and a length equal to the master document as described above.  If you untoggle the "Show Source of Selected Element Only" button the remainder of the file will be gone.
